#include<bits/stdc++.h>
using namespace std;       

typedef long long int ll;
#define mod 100000007



//Binary Exponentiation!

ll b_exp(ll a,ll b,ll p){

  a=a%p;
  if(a==0)
    return 0;

  ll ans=1;
  while(b){
    if(b&1)
      ans=(ans*a)%p;
    a=(a*a)%p;
    b>>=1;
  }
  return ans;
}

//Modular inverse!

ll mod_inv(ll a,ll p){
  return b_exp(a,p-2,p);
}


//Finding factorial

vector<ll>fact(2000010);
void pre(){
  fact[0]=1;
  for(ll i=1;i<=2000005;i++)
    fact[i]=(fact[i-1]*i)%1000000007;
}

// nCr computation.

ll ncr(ll n,ll r){
  if(n<r)
    return 0;
  if(r==0)
    return 1;
  return ((fact[n]*(mod_inv(fact[r],1000000007))%1000000007*mod_inv(fact[n-r],1000000007)))%1000000007;
}

/****************************************Combinatorics********************************************************/


vector<ll>sieve(1000005,1);

void precmp(){


  sieve[1]=1;
  sieve[2]=2;
  for(ll i=1;i<=1000000;i++)
    sieve[i]=i;
  for(ll i=2;i<=1000000;i++){
    if(sieve[i]==i){
      for(ll j=i*i;j<=1000000;j+=i)
        sieve[j]=i;
    }
  }
}

bool find(ll x){
  for(int i=2;i*i<=x;i++)
    if(x%i==0)
      return false;
   return true;
}


void solve(){

    ll n;
    cin>>n;
    if(n==2){
      cout<<"0\n";
      return;
    }
    ll a,b;
    ll ans1=INT_MIN;
    if(n&1){
      a=n/2;
      b=n-a;
    }
    else{
      if((n/2)%2!=0)
      {
      a=n/2+2;
      b=n-a;
    }
    else{
      a=n/2+1;
      b=n-a;
    }
    }
    cout<<max(ans1,((a*b)/__gcd(a,b)-__gcd(a,b)))<<"\n";

}






         
int main(){
         
   #ifndef ONLINE_JUDGE
   freopen("inpp.txt", "r", stdin);
   freopen("out.txt", "w", stdout);
   #endif
   std::ios::sync_with_stdio(false); 
   cin.tie(NULL);
   
 
   ll t;
   cin>>t;
  
   while(t--){
    solve();
   }    
   
 

   return 0;
}
